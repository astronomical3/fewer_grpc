// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: fewer/fewer.proto

package fewer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FewerService_GetAggregatesStream_FullMethodName = "/fewer.FewerService/GetAggregatesStream"
)

// FewerServiceClient is the client API for FewerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service that returns an aggregate result per few numbers sent over to the service.
//
//	The service will return fewer NumberResponse messages than it will receive
//	NumberRequest messages, hence the term "Fewer Service".
type FewerServiceClient interface {
	GetAggregatesStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberRequest, NumberResponse], error)
}

type fewerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFewerServiceClient(cc grpc.ClientConnInterface) FewerServiceClient {
	return &fewerServiceClient{cc}
}

func (c *fewerServiceClient) GetAggregatesStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberRequest, NumberResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FewerService_ServiceDesc.Streams[0], FewerService_GetAggregatesStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumberRequest, NumberResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FewerService_GetAggregatesStreamClient = grpc.BidiStreamingClient[NumberRequest, NumberResponse]

// FewerServiceServer is the server API for FewerService service.
// All implementations must embed UnimplementedFewerServiceServer
// for forward compatibility.
//
// Service that returns an aggregate result per few numbers sent over to the service.
//
//	The service will return fewer NumberResponse messages than it will receive
//	NumberRequest messages, hence the term "Fewer Service".
type FewerServiceServer interface {
	GetAggregatesStream(grpc.BidiStreamingServer[NumberRequest, NumberResponse]) error
	mustEmbedUnimplementedFewerServiceServer()
}

// UnimplementedFewerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFewerServiceServer struct{}

func (UnimplementedFewerServiceServer) GetAggregatesStream(grpc.BidiStreamingServer[NumberRequest, NumberResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAggregatesStream not implemented")
}
func (UnimplementedFewerServiceServer) mustEmbedUnimplementedFewerServiceServer() {}
func (UnimplementedFewerServiceServer) testEmbeddedByValue()                      {}

// UnsafeFewerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FewerServiceServer will
// result in compilation errors.
type UnsafeFewerServiceServer interface {
	mustEmbedUnimplementedFewerServiceServer()
}

func RegisterFewerServiceServer(s grpc.ServiceRegistrar, srv FewerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFewerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FewerService_ServiceDesc, srv)
}

func _FewerService_GetAggregatesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FewerServiceServer).GetAggregatesStream(&grpc.GenericServerStream[NumberRequest, NumberResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FewerService_GetAggregatesStreamServer = grpc.BidiStreamingServer[NumberRequest, NumberResponse]

// FewerService_ServiceDesc is the grpc.ServiceDesc for FewerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FewerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fewer.FewerService",
	HandlerType: (*FewerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAggregatesStream",
			Handler:       _FewerService_GetAggregatesStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fewer/fewer.proto",
}
